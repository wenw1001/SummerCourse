測資：
{5,7,7,8,8,10}, target8 -->[3,4]
{}, target=0 -->[-1,-1]
{1}, target=0 -->[-1,-1]
{1,2,3}, target=1 -->[0,0]


---------執行程式---------
在int main(int argc, const char * argv[])下方修改nums1和target的值

（以下為預設測資{5,7,7,8,8,10}以及target=8）
vector<int> nums1({5,7,7,8,8,10});
int target = 8;

---------程式碼說明---------
概念：進行兩次二分法，分別找出最接近target first position的位置以及最接近target last position的位置

1. 第一個while loop找出最接近target first position的位置，其判斷邏輯為切的數字若小於target，往該數字右半部尋找，大於等於就去左半部尋找，最後得出的位置會與我們要的答案差距1以內

2. 續1，找到的位置會分為以下三種情況
a.當該位置的值為target，則找到first position
b.當該位置的值小於target，且其右邊還有元素，則first position為右邊元素之位置
c.當該位置的值小於target，且其右邊無元素，則代表沒有此target元素，回傳[-1,-1]

3.第二個while loop找出最接近target last position的位置，其判斷邏輯為切的數字若小於等於target，往該數字右半部尋找，大於就去左半部尋找，最後得出的位置會與我們要的答案差距1以內

4. 續ˇ，找到的位置會分為以下三種情況
a.當該位置的值為target，則找到last position
b.當該位置的值大於target，且其左邊還有元素，則last position為左邊元素之位置
c.當該位置的值小於target，且其左邊無元素，則代表沒有此target元素，回傳[-1,-1]

5. 檢查first position和last position的值皆為target，是則回傳position值，否則回傳[-1,-1]

---------複雜度分析---------
執行了兩次while loop，while loop會搜尋左半或右半，直到搜尋陣列長度<0，即每次會執行T(n/2)次，時間複雜度為O(2*T(n/2))＝O(2*logn)=O(logn)
